// Code generated by make_resources.go; DO NOT EDIT.
package resources

import (
	"testing"

	"golang.org/x/text/feature/plural"
	"golang.org/x/text/language"
)

func TestCardinal_0(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.Other, []string{"0~15", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_bm, tag_bo, tag_dz, tag_id, tag_ig, tag_ii, tag_in, tag_ja, tag_jbo, tag_jv, tag_jw, tag_kde, tag_kea, tag_km, tag_ko, tag_lkt, tag_lo, tag_ms, tag_my, tag_nqo, tag_osa, tag_root, tag_sah, tag_ses, tag_sg, tag_su, tag_th, tag_to, tag_vi, tag_wo, tag_yo, tag_yue, tag_zh,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_1(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0", "1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0~1.0", "0.00~0.04"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"1.1~2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_am, tag_as, tag_bn, tag_fa, tag_gu, tag_hi, tag_kn, tag_pcm, tag_zu,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_2(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0", "1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0~1.5"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"2.0~3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_ff, tag_fr, tag_hy, tag_kab,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_3(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0", "1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0~1.5"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"2.0~3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_pt,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_4(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_ast, tag_ca, tag_de, tag_en, tag_et, tag_fi, tag_fy, tag_gl, tag_ia, tag_io, tag_it, tag_ji, tag_nl, tag_pt_PT, tag_sc, tag_scn, tag_sv, tag_sw, tag_ur, tag_yi,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_5(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0", "1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0", "0.1", "1.0", "0.00", "0.01", "1.00", "0.000", "0.001", "1.000", "0.0000", "0.0001", "1.0000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.2~0.9", "1.1~1.8", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_si,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_6(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0", "1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_ak, tag_bho, tag_guw, tag_ln, tag_mg, tag_nso, tag_pa, tag_ti, tag_wa,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_7(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0", "1", "11~24"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0", "1.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "19.0", "20.0", "21.0", "22.0", "23.0", "24.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~10", "100~106", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_tzm,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_8(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~0.9", "1.1~1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_af, tag_an, tag_asa, tag_az, tag_bem, tag_bez, tag_bg, tag_brx, tag_ce, tag_cgg, tag_chr, tag_ckb, tag_dv, tag_ee, tag_el, tag_eo, tag_es, tag_eu, tag_fo, tag_fur, tag_gsw, tag_ha, tag_haw, tag_hu, tag_jgo, tag_jmc, tag_ka, tag_kaj, tag_kcg, tag_kk, tag_kkj, tag_kl, tag_ks, tag_ksb, tag_ku, tag_ky, tag_lb, tag_lg, tag_mas, tag_mgo, tag_ml, tag_mn, tag_mr, tag_nah, tag_nb, tag_nd, tag_ne, tag_nn, tag_nnh, tag_no, tag_nr, tag_ny, tag_nyn, tag_om, tag_or, tag_os, tag_pap, tag_ps, tag_rm, tag_rof, tag_rwk, tag_saq, tag_sd, tag_sdh, tag_seh, tag_sn, tag_so, tag_sq, tag_ss, tag_ssy, tag_st, tag_syr, tag_ta, tag_te, tag_teo, tag_tig, tag_tk, tag_tn, tag_tr, tag_ts, tag_ug, tag_uz, tag_ve, tag_vo, tag_vun, tag_wae, tag_xh, tag_xog,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_9(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.1~1.6"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0", "2.0~3.4", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_da,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_10(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.1~1.6", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_is,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_11(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0", "0.2~1.0", "1.2~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_mk,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_12(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0~3", "5", "7", "8", "10~13", "15", "17", "18", "20", "21", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0~0.3", "0.5", "0.7", "0.8", "1.0~1.3", "1.5", "1.7", "1.8", "2.0", "2.1", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"4", "6", "9", "14", "16", "19", "24", "26", "104", "1004"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.4", "0.6", "0.9", "1.4", "1.6", "1.9", "2.4", "2.6", "10.4", "100.4", "1000.4"})

	tags := []language.Tag{
		tag_ceb, tag_fil, tag_tl,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_13(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.Zero, []string{"0", "10~20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Zero, []string{"0.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.1", "1.0", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~9", "22~29", "102", "1002"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.2~0.9", "1.2~1.9", "10.2", "100.2", "1000.2"})

	tags := []language.Tag{
		tag_lv, tag_prg,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_14(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.Zero, []string{"0"})
	tests = appendDecimalTests(tests, plural.Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.1~1.6"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"2.0~3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_lag,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_15(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.Zero, []string{"0"})
	tests = appendDecimalTests(tests, plural.Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_ksh,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_16(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2"})
	tests = appendDecimalTests(tests, plural.Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "3~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~0.9", "1.1~1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_iu, tag_naq, tag_sat, tag_se, tag_sma, tag_smi, tag_smj, tag_smn, tag_sms,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_17(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"0", "1"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.0~1.0", "0.00~0.04"})

	tests = appendIntegerTests(tests, plural.Few, []string{"2~10"})
	tests = appendDecimalTests(tests, plural.Few, []string{"2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "2.00", "3.00", "4.00", "5.00", "6.00", "7.00", "8.00"})

	tests = appendIntegerTests(tests, plural.Other, []string{"11~26", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"1.1~1.9", "2.1~2.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_shi,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_18(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})

	tests = appendIntegerTests(tests, plural.Few, []string{"0", "2~16", "102", "1002"})
	tests = appendDecimalTests(tests, plural.Few, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"20~35", "100", "1000", "10000", "100000", "1000000"})

	tags := []language.Tag{
		tag_mo, tag_ro,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_19(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, plural.Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})
	tests = appendDecimalTests(tests, plural.Few, []string{"0.2~0.4", "1.2~1.4", "2.2~2.4", "3.2~3.4", "4.2~4.4", "5.2", "10.2", "100.2", "1000.2"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0", "0.5~1.0", "1.5~2.0", "2.5~2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_bs, tag_hr, tag_sh, tag_sr,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_20(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "11"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "11.0", "1.00", "11.00", "1.000", "11.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2", "12"})
	tests = appendDecimalTests(tests, plural.Two, []string{"2.0", "12.0", "2.00", "12.00", "2.000", "12.000", "2.0000"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3~10", "13~19"})
	tests = appendDecimalTests(tests, plural.Few, []string{"3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "19.0", "3.00"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "20~34", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~0.9", "1.1~1.6", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_gd,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_21(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"})
	tests = appendDecimalTests(tests, plural.Few, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	tags := []language.Tag{
		tag_sl,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_22(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"})
	tests = appendDecimalTests(tests, plural.Two, []string{"0.2", "1.2", "2.2", "3.2", "4.2", "5.2", "6.2", "7.2", "10.2", "100.2", "1000.2"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"})
	tests = appendDecimalTests(tests, plural.Few, []string{"0.3", "0.4", "1.3", "1.4", "2.3", "2.4", "3.3", "3.4", "4.3", "4.4", "5.3", "5.4", "6.3", "6.4", "7.3", "7.4", "10.3", "100.3", "1000.3"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0", "0.5~1.0", "1.5~2.0", "2.5~2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_dsb, tag_hsb,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_23(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2"})

	tests = appendIntegerTests(tests, plural.Many, []string{"20", "30", "40", "50", "60", "70", "80", "90", "100", "1000", "10000", "100000", "1000000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "3~17", "101", "1001"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_he, tag_iw,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_24(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})

	tests = appendIntegerTests(tests, plural.Few, []string{"2~4"})

	tests = appendDecimalTests(tests, plural.Many, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	tags := []language.Tag{
		tag_cs, tag_sk,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_25(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})

	tests = appendIntegerTests(tests, plural.Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})

	tests = appendIntegerTests(tests, plural.Many, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_pl,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_26(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "71.0", "81.0", "101.0", "1001.0"})

	tests = appendIntegerTests(tests, plural.Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})
	tests = appendDecimalTests(tests, plural.Few, []string{"2.0", "3.0", "4.0", "22.0", "23.0", "24.0", "32.0", "33.0", "102.0", "1002.0"})

	tests = appendIntegerTests(tests, plural.Many, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Many, []string{"0.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.1", "1000.1"})

	tags := []language.Tag{
		tag_be,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_27(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "71.0", "81.0", "101.0", "1001.0"})

	tests = appendIntegerTests(tests, plural.Few, []string{"2~9", "22~29", "102", "1002"})
	tests = appendDecimalTests(tests, plural.Few, []string{"2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "22.0", "102.0", "1002.0"})

	tests = appendDecimalTests(tests, plural.Many, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "10~20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_lt,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_28(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Few, []string{"0", "2~10", "102~107", "1002"})
	tests = appendDecimalTests(tests, plural.Few, []string{"0.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "10.0", "102.0", "1002.0"})

	tests = appendIntegerTests(tests, plural.Many, []string{"11~19", "111~117", "1011"})
	tests = appendDecimalTests(tests, plural.Many, []string{"11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "111.0", "1011.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"20~35", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_mt,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_29(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})

	tests = appendIntegerTests(tests, plural.Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})

	tests = appendIntegerTests(tests, plural.Many, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_ru, tag_uk,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_30(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "21", "31", "41", "51", "61", "81", "101", "1001"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "81.0", "101.0", "1001.0"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2", "22", "32", "42", "52", "62", "82", "102", "1002"})
	tests = appendDecimalTests(tests, plural.Two, []string{"2.0", "22.0", "32.0", "42.0", "52.0", "62.0", "82.0", "102.0", "1002.0"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3", "4", "9", "23", "24", "29", "33", "34", "39", "43", "44", "49", "103", "1003"})
	tests = appendDecimalTests(tests, plural.Few, []string{"3.0", "4.0", "9.0", "23.0", "24.0", "29.0", "33.0", "34.0", "103.0", "1003.0"})

	tests = appendIntegerTests(tests, plural.Many, []string{"1000000"})
	tests = appendDecimalTests(tests, plural.Many, []string{"1000000.0", "1000000.00", "1000000.000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "5~8", "10~20", "100", "1000", "10000", "100000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~0.9", "1.1~1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0"})

	tags := []language.Tag{
		tag_br,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_31(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2"})
	tests = appendDecimalTests(tests, plural.Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3~6"})
	tests = appendDecimalTests(tests, plural.Few, []string{"3.0", "4.0", "5.0", "6.0", "3.00", "4.00", "5.00", "6.00", "3.000", "4.000", "5.000", "6.000", "3.0000", "4.0000", "5.0000", "6.0000"})

	tests = appendIntegerTests(tests, plural.Many, []string{"7~10"})
	tests = appendDecimalTests(tests, plural.Many, []string{"7.0", "8.0", "9.0", "10.0", "7.00", "8.00", "9.00", "10.00", "7.000", "8.000", "9.000", "10.000", "7.0000", "8.0000", "9.0000", "10.0000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"0", "11~25", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.0~0.9", "1.1~1.6", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_ga,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_32(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.One, []string{"1", "11", "21", "31", "41", "51", "61", "71", "101", "1001"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2", "12", "22", "32", "42", "52", "62", "72", "102", "1002"})

	tests = appendIntegerTests(tests, plural.Few, []string{"0", "20", "40", "60", "80", "100", "120", "140", "1000", "10000", "100000", "1000000"})

	tests = appendDecimalTests(tests, plural.Many, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"3~10", "13~19", "23", "103", "1003"})

	tags := []language.Tag{
		tag_gv,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_33(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.Zero, []string{"0"})
	tests = appendDecimalTests(tests, plural.Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2", "22", "42", "62", "82", "102", "122", "142", "1000", "10000", "100000"})
	tests = appendDecimalTests(tests, plural.Two, []string{"2.0", "22.0", "42.0", "62.0", "82.0", "102.0", "122.0", "142.0", "1000.0", "10000.0", "100000.0"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3", "23", "43", "63", "83", "103", "123", "143", "1003"})
	tests = appendDecimalTests(tests, plural.Few, []string{"3.0", "23.0", "43.0", "63.0", "83.0", "103.0", "123.0", "143.0", "1003.0"})

	tests = appendIntegerTests(tests, plural.Many, []string{"21", "41", "61", "81", "101", "121", "141", "161", "1001"})
	tests = appendDecimalTests(tests, plural.Many, []string{"21.0", "41.0", "61.0", "81.0", "101.0", "121.0", "141.0", "161.0", "1001.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"4~19", "100", "1004", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.1", "1000000.0"})

	tags := []language.Tag{
		tag_kw,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_34(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.Zero, []string{"0"})
	tests = appendDecimalTests(tests, plural.Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2"})
	tests = appendDecimalTests(tests, plural.Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3~10", "103~110", "1003"})
	tests = appendDecimalTests(tests, plural.Few, []string{"3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "103.0", "1003.0"})

	tests = appendIntegerTests(tests, plural.Many, []string{"11~26", "111", "1011"})
	tests = appendDecimalTests(tests, plural.Many, []string{"11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "111.0", "1011.0"})

	tests = appendIntegerTests(tests, plural.Other, []string{"100~102", "200~202", "300~302", "400~402", "500~502", "600", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_ar, tag_ars,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}

func TestCardinal_35(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, plural.Zero, []string{"0"})
	tests = appendDecimalTests(tests, plural.Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, plural.One, []string{"1"})
	tests = appendDecimalTests(tests, plural.One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, plural.Two, []string{"2"})
	tests = appendDecimalTests(tests, plural.Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, plural.Few, []string{"3"})
	tests = appendDecimalTests(tests, plural.Few, []string{"3.0", "3.00", "3.000", "3.0000"})

	tests = appendIntegerTests(tests, plural.Many, []string{"6"})
	tests = appendDecimalTests(tests, plural.Many, []string{"6.0", "6.00", "6.000", "6.0000"})

	tests = appendIntegerTests(tests, plural.Other, []string{"4", "5", "7~20", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, plural.Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tags := []language.Tag{
		tag_cy,
	}
	for _, tag := range tags {
		runTests(t, tag, tests)
	}
}
